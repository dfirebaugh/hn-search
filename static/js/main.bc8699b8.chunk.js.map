{"version":3,"sources":["logo.svg","constants/action-types.js","reducers/index.js","store/index.js","components/PreviousList.js","components/Search.js","actions/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ADD_SEARCH_TERM","initialState","searchTerms","rootReducer","state","arguments","length","undefined","action","type","Object","assign","concat","payload","store","createStore","PreviousList","_this","this","subscribe","setState","getState","react_default","a","createElement","map","x","i","key","React","Component","Search","search","handleSearch","e","target","value","onSubmit","dispatch","fetch","then","response","json","data","results","className","style","display","onChange","onClick","hits","href","url","title","author","points","src","logo","alt","App","es","components_PreviousList","components_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mNCA3BC,EAAkB,kBCGzBC,EAAe,CACnBC,YAAa,IAYAC,MATf,WAAmD,IAA9BC,EAA8BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBJ,EAAcO,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACjD,OAAIC,EAAOC,OAAST,EACXU,OAAOC,OAAO,GAAIP,EAAO,CAC9BF,YAAaE,EAAMF,YAAYU,OAAOJ,EAAOK,WAG1CT,GCRMU,EAFDC,YAAYZ,sCCqBXa,8LAlBO,IAAAC,EAAAC,KAClBJ,EAAMK,UAAU,kBAAMF,EAAKG,SAAS,CAAElB,YAAaY,EAAMO,WAAWnB,iDAGpE,OAAOoB,EAAAC,EAAAC,cAAA,WACJN,KAAKd,OACJkB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,UACGN,KAAKd,OAAiBc,KAAKd,MAAMF,YAZHuB,IAAI,SAACC,EAAGC,GAAJ,OAAUL,EAAAC,EAAAC,cAAA,MAAII,IAAKD,GAAT,IAAcD,EAAd,iBAE9BG,IAAMC,gCCiClBC,6MAxBb3B,MAAQ,CAAE4B,OAAQ,MAClBC,aAAe,SAAAC,GACbjB,EAAKG,SAAS,CAAEY,OAAQE,EAAEC,OAAOC,WAEnCC,SAAW,WChBN,IAAuBxB,EDiB1BC,EAAMwB,UCjBoBzB,EDiBGI,EAAKb,MAAM4B,OChBnC,CAAEvB,KAAMT,EAAiBa,aDkB9B0B,MAAK,8CAAA3B,OAA+CK,EAAKb,MAAM4B,SAC5DQ,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAI1B,EAAKG,SAAS,CAAEwB,QAASD,+EAGzC,OAAOrB,EAAAC,EAAAC,cAAA,UAAQqB,UAAU,cACvBvB,EAAAC,EAAAC,cAAA,OAAKsB,MAAO,CAAEC,QAAS,SACrBzB,EAAAC,EAAAC,cAAA,SAAOwB,SAAU9B,KAAKe,eACtBX,EAAAC,EAAAC,cAAA,UAAQyB,QAAS/B,KAAKmB,UAAtB,WAEDnB,KAAKd,OAASc,KAAKd,MAAM4B,OACzBd,KAAKd,MAAMwC,SAAsB1B,KAAKd,MAAMwC,QA3BbM,KAAKzB,IAAI,SAACC,EAAGC,GACjD,OAAOL,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,UAAUjB,IAAKD,GACnCL,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAG2B,KAAMzB,EAAE0B,KAAM1B,EAAE2B,QACvB/B,EAAAC,EAAAC,cAAA,oBAAYE,EAAE4B,OAAd,KACAhC,EAAAC,EAAAC,cAAA,oBAAYE,EAAE6B,YAwBVrC,KAAKd,MAAMwC,SAAWtB,EAAAC,EAAAC,cAAA,OAAKgC,IAAKC,IAAMZ,UAAU,WAAWa,IAAI,iBApBlD7B,IAAMC,WEGZ6B,SATH,kBACVrC,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,OACbvB,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAU9C,MAAOA,GACfQ,EAAAC,EAAAC,cAACqC,EAAD,MACAvC,EAAAC,EAAAC,cAACsC,EAAD,UCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC","file":"static/js/main.bc8699b8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const ADD_SEARCH_TERM = \"ADD_SEARCH_TERM\";","\nimport { ADD_SEARCH_TERM } from '../constants/action-types';\n\nconst initialState = {\n  searchTerms: []\n};\n\nfunction rootReducer(state = initialState, action) {\n  if (action.type === ADD_SEARCH_TERM) {\n    return Object.assign({}, state, {\n      searchTerms: state.searchTerms.concat(action.payload)\n    })\n  }\n  return state;\n}\n\nexport default rootReducer;","import { createStore } from 'redux';\nimport rootReducer from \"../reducers/index\";\n\nconst store = createStore(rootReducer)\n\nexport default store;","import React from 'react';\nimport store from '../store/index';\n\nconst queries = searchTerms => searchTerms.map((x, i) => <li key={i}> {x} </li>)\n\nclass PreviousList extends React.Component {\n  componentDidMount() {\n    store.subscribe(() => this.setState({ searchTerms: store.getState().searchTerms }))\n  }\n  render() {\n    return <div>\n      {this.state &&\n        <div>\n          <h3> Previous Queries: </h3>\n          <ol>\n            {this.state && queries(this.state.searchTerms)}\n          </ol>\n        </div>\n      }\n    </div>\n  }\n}\n\n\nexport default PreviousList;","import React from 'react';\nimport store from '../store/index';\nimport { addSearchTerm } from '../actions/index';\nimport logo from '../logo.svg';\n\nconst resultList = results => results.hits.map((x, i) => {\n  return <div className=\"results\" key={i}>\n    <h2><a href={x.url}>{x.title}</a></h2>\n    <p>author: {x.author} </p>\n    <p>points: {x.points}</p>\n  </div>\n});\n\nclass Search extends React.Component {\n  state = { search: '' }\n  handleSearch = e => {\n    this.setState({ search: e.target.value })\n  }\n  onSubmit = () => {\n    store.dispatch(addSearchTerm(this.state.search))\n\n    fetch(`https://hn.algolia.com/api/v1/search?query=${this.state.search}`)\n      .then(response => response.json())\n      .then(data => this.setState({ results: data }))\n  }\n  render() {\n    return <header className=\"App-header\">\n      <div style={{ display: 'flex' }}>\n        <input onChange={this.handleSearch} />\n        <button onClick={this.onSubmit}>Submit</button>\n      </div>\n      {this.state && this.state.search}\n      {this.state.results && resultList(this.state.results)}\n      {!this.state.results && <img src={logo} className=\"App-logo\" alt=\"logo\" />}\n    </header>\n  }\n}\n\nexport default Search;","import { ADD_SEARCH_TERM } from '../constants/action-types';\n\nexport function addSearchTerm(payload) {\n  return { type: ADD_SEARCH_TERM, payload }\n}","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store/index';\nimport PreviousList from './components/PreviousList';\nimport Search from './components/Search';\nimport './App.css';\n\nconst App = () => (\n  <div className=\"App\">\n    <Provider store={store}>\n      <PreviousList />\n      <Search />\n    </Provider>\n  </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}